@page "/"
@using ToDoBlazor.DB
@inject ToDoBlazorContext context;


<PageTitle>Home</PageTitle>



<div class="container">
    <div class="row">
        <div class="col-1 m-3">
            <h1>Введите задачу:</h1>
            <input type="text" @bind-value="taskit.Title" />
            <button class="btn" type="submit" @onclick="(()=> AddTask())"> Добавить</button> 
        </div>
    </div>
    <div class="row ">
        <div class="col">
            <div class="container m-1">
                <button class="btn" type="submit" @onclick="(()=> AllTask())"> Все задачи</button>
                <button class="btn" type="submit" @onclick="(()=> IsCompletedTask())"> Выполненные </button>
                <button class="btn" type="submit" @onclick="(()=> NotCompletedTask())"> Невыполненные </button>
            </div>

            @if (tasks.Count != 0)
            {
                @foreach (var item in tasks)
                {
                    <div class="row m-4">
                        <div class="col-1 align-content-center">
                            <div class="form-check">
                                <input class="form-check-input"  type="checkbox" @onchange="@((arg)=> ChangeStatys(item, arg))" id="flexCheckChecked" checked="@item.IsCompleted">
                            </div>
                        </div>
                        <div class="col-1">
                            <div class="card " style="width: 18rem;">
                                <div class="card-body">
                                    <div class="row-4 text-start">
                                        <b style="@Check(item)"> @item.Title</b>
                                       <button class="btn" type="submit" @onclick="(()=> DeleteTask(item))"> delete  </button> 
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>



    @code
{
    List<Taskit> tasks = new();
    string check = "";

    Taskit taskit { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        tasks = context.Tasks.ToList();

    }

    public string Check(Taskit taskit)
    {
        if (taskit.IsCompleted)
            return "text-decoration:line-through";
        else
            return "";
    }



    public void AllTask()
    {
        tasks = context.Tasks.ToList();
    }
    public void IsCompletedTask()
    {
        tasks = context.Tasks.Where(s => s.IsCompleted == true).ToList();
    }
    public void NotCompletedTask()
    {
        tasks = context.Tasks.Where(s => s.IsCompleted == false).ToList();
    }
    public void DeleteTask(Taskit taskit)
    {
        context.Tasks.Remove(taskit);
        context.SaveChanges();    
        AllTask();

    }
    public void AddTask()
    {
        try
        {

            context.Tasks.Add(taskit);
            context.SaveChanges();
            taskit = new();
            AllTask();
        }
        catch{}

    }
    public async Task ChangeStatys(Taskit taskit, ChangeEventArgs arg)
    {
        taskit.IsCompleted = (bool)arg.Value;
        
        context.SaveChanges();
    }
}

    

